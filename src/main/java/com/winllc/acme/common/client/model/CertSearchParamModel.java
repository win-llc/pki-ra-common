/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.winllc.acme.common.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * CertSearchParam
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-12T15:21:01.254Z[GMT]")
public class CertSearchParamModel {
  /**
   * Gets or Sets field
   */
  @JsonAdapter(FieldEnum.Adapter.class)
  public enum FieldEnum {
    SUBJECT("SUBJECT"),
    ISSUER("ISSUER"),
    STATUS("STATUS"),
    VALID_ON("VALID_ON"),
    EXPIRES_ON("EXPIRES_ON"),
    REVOKED_ON("REVOKED_ON"),
    SERIAL("SERIAL");

    private String value;

    FieldEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FieldEnum fromValue(String text) {
      for (FieldEnum b : FieldEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FieldEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FieldEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("field")
  private FieldEnum field = null;

  /**
   * Gets or Sets relation
   */
  @JsonAdapter(RelationEnum.Adapter.class)
  public enum RelationEnum {
    EQUALS("EQUALS"),
    DOES_NOT_EQUAL("DOES_NOT_EQUAL"),
    CONTAINS("CONTAINS"),
    GREATER_THAN("GREATER_THAN"),
    LESS_THAN("LESS_THAN"),
    AND("AND"),
    OR("OR");

    private String value;

    RelationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RelationEnum fromValue(String text) {
      for (RelationEnum b : RelationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RelationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RelationEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("relation")
  private RelationEnum relation = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("parent")
  private CertSearchParamModel parent = null;

  @SerializedName("params")
  private List<CertSearchParamModel> params = null;

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("pageSize")
  private Integer pageSize = null;

  @SerializedName("paginated")
  private Boolean paginated = null;

  @SerializedName("relational")
  private Boolean relational = null;

  public CertSearchParamModel field(FieldEnum field) {
    this.field = field;
    return this;
  }

   /**
   * Get field
   * @return field
  **/
  @Schema(description = "")
  public FieldEnum getField() {
    return field;
  }

  public void setField(FieldEnum field) {
    this.field = field;
  }

  public CertSearchParamModel relation(RelationEnum relation) {
    this.relation = relation;
    return this;
  }

   /**
   * Get relation
   * @return relation
  **/
  @Schema(description = "")
  public RelationEnum getRelation() {
    return relation;
  }

  public void setRelation(RelationEnum relation) {
    this.relation = relation;
  }

  public CertSearchParamModel value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @Schema(description = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public CertSearchParamModel parent(CertSearchParamModel parent) {
    this.parent = parent;
    return this;
  }

   /**
   * Get parent
   * @return parent
  **/
  @Schema(description = "")
  public CertSearchParamModel getParent() {
    return parent;
  }

  public void setParent(CertSearchParamModel parent) {
    this.parent = parent;
  }

  public CertSearchParamModel params(List<CertSearchParamModel> params) {
    this.params = params;
    return this;
  }

  public CertSearchParamModel addParamsItem(CertSearchParamModel paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<CertSearchParamModel>();
    }
    this.params.add(paramsItem);
    return this;
  }

   /**
   * Get params
   * @return params
  **/
  @Schema(description = "")
  public List<CertSearchParamModel> getParams() {
    return params;
  }

  public void setParams(List<CertSearchParamModel> params) {
    this.params = params;
  }

  public CertSearchParamModel page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @Schema(description = "")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public CertSearchParamModel pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

   /**
   * Get pageSize
   * @return pageSize
  **/
  @Schema(description = "")
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public CertSearchParamModel paginated(Boolean paginated) {
    this.paginated = paginated;
    return this;
  }

   /**
   * Get paginated
   * @return paginated
  **/
  @Schema(description = "")
  public Boolean isPaginated() {
    return paginated;
  }

  public void setPaginated(Boolean paginated) {
    this.paginated = paginated;
  }

  public CertSearchParamModel relational(Boolean relational) {
    this.relational = relational;
    return this;
  }

   /**
   * Get relational
   * @return relational
  **/
  @Schema(description = "")
  public Boolean isRelational() {
    return relational;
  }

  public void setRelational(Boolean relational) {
    this.relational = relational;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertSearchParamModel certSearchParamModel = (CertSearchParamModel) o;
    return Objects.equals(this.field, certSearchParamModel.field) &&
        Objects.equals(this.relation, certSearchParamModel.relation) &&
        Objects.equals(this.value, certSearchParamModel.value) &&
        Objects.equals(this.parent, certSearchParamModel.parent) &&
        Objects.equals(this.params, certSearchParamModel.params) &&
        Objects.equals(this.page, certSearchParamModel.page) &&
        Objects.equals(this.pageSize, certSearchParamModel.pageSize) &&
        Objects.equals(this.paginated, certSearchParamModel.paginated) &&
        Objects.equals(this.relational, certSearchParamModel.relational);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, relation, value, parent, params, page, pageSize, paginated, relational);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertSearchParam {\n");
    
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    relation: ").append(toIndentedString(relation)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    paginated: ").append(toIndentedString(paginated)).append("\n");
    sb.append("    relational: ").append(toIndentedString(relational)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
