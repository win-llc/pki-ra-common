/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.winllc.acme.common.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;

import java.util.ArrayList;
import java.util.List;
/**
 * RAUser
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-12-12T15:21:01.254Z[GMT]")
public class RAUser {
  @SerializedName("password")
  private String password = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("authorities")
  private List<GrantedAuthority> authorities = null;

  @SerializedName("accountNonExpired")
  private Boolean accountNonExpired = null;

  @SerializedName("accountNonLocked")
  private Boolean accountNonLocked = null;

  @SerializedName("credentialsNonExpired")
  private Boolean credentialsNonExpired = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("permissions")
  private List<String> permissions = null;

  public RAUser password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public RAUser username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public RAUser authorities(List<GrantedAuthority> authorities) {
    this.authorities = authorities;
    return this;
  }

  public RAUser addAuthoritiesItem(GrantedAuthority authoritiesItem) {
    if (this.authorities == null) {
      this.authorities = new ArrayList<GrantedAuthority>();
    }
    this.authorities.add(authoritiesItem);
    return this;
  }

   /**
   * Get authorities
   * @return authorities
  **/
  @Schema(description = "")
  public List<GrantedAuthority> getAuthorities() {
    return authorities;
  }

  public void setAuthorities(List<GrantedAuthority> authorities) {
    this.authorities = authorities;
  }

  public RAUser accountNonExpired(Boolean accountNonExpired) {
    this.accountNonExpired = accountNonExpired;
    return this;
  }

   /**
   * Get accountNonExpired
   * @return accountNonExpired
  **/
  @Schema(description = "")
  public Boolean isAccountNonExpired() {
    return accountNonExpired;
  }

  public void setAccountNonExpired(Boolean accountNonExpired) {
    this.accountNonExpired = accountNonExpired;
  }

  public RAUser accountNonLocked(Boolean accountNonLocked) {
    this.accountNonLocked = accountNonLocked;
    return this;
  }

   /**
   * Get accountNonLocked
   * @return accountNonLocked
  **/
  @Schema(description = "")
  public Boolean isAccountNonLocked() {
    return accountNonLocked;
  }

  public void setAccountNonLocked(Boolean accountNonLocked) {
    this.accountNonLocked = accountNonLocked;
  }

  public RAUser credentialsNonExpired(Boolean credentialsNonExpired) {
    this.credentialsNonExpired = credentialsNonExpired;
    return this;
  }

   /**
   * Get credentialsNonExpired
   * @return credentialsNonExpired
  **/
  @Schema(description = "")
  public Boolean isCredentialsNonExpired() {
    return credentialsNonExpired;
  }

  public void setCredentialsNonExpired(Boolean credentialsNonExpired) {
    this.credentialsNonExpired = credentialsNonExpired;
  }

  public RAUser enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public RAUser permissions(List<String> permissions) {
    this.permissions = permissions;
    return this;
  }

  public RAUser addPermissionsItem(String permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<String>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(description = "")
  public List<String> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<String> permissions) {
    this.permissions = permissions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RAUser raUser = (RAUser) o;
    return Objects.equals(this.password, raUser.password) &&
        Objects.equals(this.username, raUser.username) &&
        Objects.equals(this.authorities, raUser.authorities) &&
        Objects.equals(this.accountNonExpired, raUser.accountNonExpired) &&
        Objects.equals(this.accountNonLocked, raUser.accountNonLocked) &&
        Objects.equals(this.credentialsNonExpired, raUser.credentialsNonExpired) &&
        Objects.equals(this.enabled, raUser.enabled) &&
        Objects.equals(this.permissions, raUser.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, username, authorities, accountNonExpired, accountNonLocked, credentialsNonExpired, enabled, permissions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RAUser {\n");
    
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    authorities: ").append(toIndentedString(authorities)).append("\n");
    sb.append("    accountNonExpired: ").append(toIndentedString(accountNonExpired)).append("\n");
    sb.append("    accountNonLocked: ").append(toIndentedString(accountNonLocked)).append("\n");
    sb.append("    credentialsNonExpired: ").append(toIndentedString(credentialsNonExpired)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
